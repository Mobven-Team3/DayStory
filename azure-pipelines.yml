trigger:
- main

pool:
  name: Default
  demands:
  - agent.name -equals test-deneme

variables:
  token: "sqa_d61401827f15434a1621ea98e4a8914a8086f822"

steps:
- script: |
    dotnet sonarscanner begin /k:"DayStory-Api-_T3__DayStory-Api-_T3__3a191493-fd8f-4bbf-9b75-952356eb4485" /d:sonar.host.url="http://localhost:9000" /d:sonar.token="$(token)"
  displayName: 'SonarQube Begin'

- script: |
    dotnet build
  displayName: 'Build'

- script: |
    dotnet publish DayStory.WebAPI/DayStory.WebAPI.csproj -f net8.0 -c Release --self-contained -r linux-x64
  displayName: 'Publish'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
     Get-ChildItem -Path "C:\agent\_work\4\s\DayStory.WebAPI\bin\Release\net8.0\linux-x64\publish" -Recurse -Filter *.config | Remove-Item -Force
     Get-ChildItem -Path "C:\agent\_work\4\s\DayStory.WebAPI\bin\Release\net8.0\linux-x64\publish" -Recurse -Filter *.json | Where-Object { $_.Name -notlike '*.deps.json' } | Remove-Item -Force

- task: SSH@0
  inputs:
    sshEndpoint: 'mobven-ssh'
    runOptions: 'commands'
    commands: |
      systemctl stop DayStory-WebAPI.service
    readyTimeout: '20000'
  displayName: 'Service-Stop'

- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'mobven-ssh'
    sourceFolder: '$(Pipeline.Workspace)/s/DayStory.WebAPI/bin/Release/net8.0/linux-x64/publish/'
    contents: '**'
    targetFolder: '/var/www/DayStory/DayStory.WebAPI'
    readyTimeout: '20000'
  displayName: 'CopyFilesOverSSH'

- task: SSH@0
  inputs:
    sshEndpoint: 'mobven-ssh'
    runOptions: 'commands'
    commands: |
      systemctl start DayStory-WebAPI.service
    readyTimeout: '20000'
  displayName: 'Service-Start'

# - task: SSH@0
#   inputs:
#     sshEndpoint: 'mobven-ssh'
#     runOptions: 'commands'
#     commands: |
#       systemctl start DayStory-Application.service  > outputdsApplication.txt || true
#       cat outputdsApplication.txt
#       systemctl start DayStory-Domain.service > outputdsdomain.txt || true
#       cat outputdsdomain.txt
#       systemctl start DayStory-Infrastructure.service > outputdsinfrastructure.txt || true
#       cat outputdsinfrastructure.txt
#       systemctl start DayStory-WebAPI.service > outputdswebapi.txt || true
#       cat outputdswebapi.txt
#       systemctl start DayStory-Common.service > outputdscommon.txt || true
#       cat outputdscommon.txt
#     readyTimeout: '20000'
#   displayName: 'Service-Status'

- script: |
    dotnet sonarscanner end /d:sonar.token="$(token)"
  displayName: 'SonarQube End'
